name: Elixir CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ["1.16.1"]
        otp: ["26.2.2"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore deps cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-deps-

      - name: Restore _build cache
        uses: actions/cache@v4
        with:
          path: _build
          key: ${{ runner.os }}-mix-build-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-build-

      - name: Restore PLT cache
        id: plt-cache
        uses: actions/cache@v4
        with:
          key: |
            plt-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-
          path: |
            priv/plts

      - name: Install dependencies
        run: mix deps.get

      - name: Compile code
        run: mix compile --warnings-as-errors

      - name: Check code formatting
        run: mix format --check-formatted

      - name: Run Credo for linting
        run: mix credo --strict

      - name: Run Sobelow security check
        run: mix sobelow --config

      - name: Run MixAudit security check
        run: mix deps.audit

      - name: Run Doctor for documentation health
        run: mix doctor

      - name: Create PLTs
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Run dialyzer
        run: mix dialyzer --no-check --format dialyxir

  tests_and_coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        elixir: ["1.16.1"]
        otp: ["26.2.2"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore deps cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-deps-

      - name: Restore _build cache
        uses: actions/cache@v4
        with:
          path: _build
          key: ${{ runner.os }}-mix-build-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-build-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile code
        run: mix compile

      - name: Run Tests
        run: mix test --cover

      - name: Send coverage to Coveralls
        run: mix coveralls.github
