defmodule ElixIRCd.Schemas.UserChannel do
  @moduledoc """
  Module for the UserChannel schema.
  """

  alias Ecto.Changeset
  alias ElixIRCd.Schemas.Channel
  alias ElixIRCd.Schemas.User
  alias ElixIRCd.Schemas.UserChannel
  alias ElixIRCd.Types.PortType

  import Ecto.Changeset

  use TypedEctoSchema

  # ETSO adapter does not support composite primary keys to be used with user and channel,
  # so temporarily it is using a autogenerated id. It needs to be improved in the future.
  @primary_key {:id, :binary_id, autogenerate: true}
  typed_schema "user_channel" do
    belongs_to(:user, User, references: :socket, type: PortType, foreign_key: :user_socket)
    belongs_to(:channel, Channel, references: :name, type: :string, foreign_key: :channel_name)
  end

  @spec changeset(UserChannel.t(), map()) :: Changeset.t()
  def changeset(user_channel, attrs) do
    user_channel
    |> cast(attrs, [:user_socket, :channel_name])
    |> validate_required([:user_socket, :channel_name])
  end
end
